---
##################################################################################################################
# CED
#
# Here you specify the parameters for gathering data from the CEBAF Element Database (CED)
#
#  history: (optional) Set true in order to query CED history, otherwise current OPS CED is used
#  workspace: (optional) Workspace/Date to query.  Defaults is OPS/now
#  zone: The name of a CED zone
#  types: A list of types to query. Can simply use BeamElem or LineElem and rely on CED inheritance
#  properties: a list of properties to fetch in addition to default EPICSName and S which are hard-coded.
#              must be applicable to all retrieved types.
#  expressions: a list of CED property expressions.
#       Example: S >= 6.65657  # skip over elements in the front of the MFA0I03 S Value
#       Example: '!isSRF'      # Only retrieve elements whose is isSRF property is false or null
#
ced:
  history: true           # We need the beamline as it existed previously
  workspace: '2021-12-15' # When using history specify a date as the workspace
  zone: "Injector"
  types: ["LineElem"]
  properties: []
  expressions:
    - S >= 6.65657  # skip over elements in the front of the MFA0I03 S Value
    - S <= 101.58   # So that ILM0R08 is final element

##################################################################################################################
# Nodes
#
# Here you specify information about the nodes that will be generated from the CED data.
#
# setpoints:  List CED types whose elements are to be considered setpoints
# readgacks:  List CED types whose elements are to be considered readbacks
# filters:    A filter expression governing whether data for a given interval is valid (i.e. was the beam on?)
#

nodes:
  setpoints:
    Corrector: [".BDL", ".S"]
    Dipole: [".BDL", ".S"]
    Quad: [".BDL", ".S"]
    Solenoid: [".BDL", ".S"]
    CryoCavity: ['PSET','GSET','XPSET8']  # Note XPSET8 requires special handling (belongs zone, not cavity)
  readbacks:
    BeamLossMonitor: ["Lc"]
    BPM: [".XPOS", ".YPOS", ""] # The "" is to give us a bare EPICSName which means the wire sum
    IonPump: [""]               # The "" is the vacuum readback
    BCM: [""]                   # node module must handle special cases
  # Specify a label to be used for each type above using "" as a field name.
  default_attributes:
    BCM: Current
    BPM: WireSum
    IonPump: Vacuum
  # Expressions to modify raw epics values
  modifiers:
    VINJDIG07: "0.066 * $(VINJDIG07) * 0.000001 *((5600/5600)/80)"
    VINJDIG02: "0.066 * $(VINJDIG02) * 0.000001 *((5600/5600)/120)"
    VINJDIG03: "0.066 * $(VINJDIG03) * 0.000001 *((5600/5600)/102)"
    VINJDIG04: "0.066 * $(VINJDIG04) * 0.000001 *((5600/5600)/160)"
    VINJDIG12: "0.066 * $(VINJDIG12) * 0.000001 *((5600/5600)/45)"
    VINJDIG08: "0.066 * $(VINJDIG08) * 0.000001 *((5600/5600)/30)"
    VINJDIG05: "0.066 * $(VINJDIG05) * 0.000001 *((5600/5600)/120)"
    VINJDIG06: "0.066 * $(VINJDIG06) * 0.000001 *((5600/5600)/120)"
    VIP0L08:   "0.066 * $(VIP0L08) * 0.000001 *((5600/5000)/11)"
    VIP0L10:   "0.066 * $(VIP0L10) * 0.000001 *((5600/5000)/11)"
    VIP0R02:   "0.066 * $(VIP0R02) * 0.000001 *((5600/5000)/22)"
    VIP0R04:   "0.066 * $(VIP0R04) * 0.000001 *((5600/5000)/11)"
    VIP0R06:   "0.066 * $(VIP0R06) * 0.000001 *((5600/5000)/11)"
    VIP0R08:   "0.066 * $(VIP0R08) * 0.000001 *((5600/5000)/11)"
    VIP0R09:   "0.066 * $(VIP0R09) * 0.000001 *((5600/5000)/11)"

  # Filter expression may use EPICS Macro variable syntax to reference PVs mentioned in the mya.global
  # secion of this config file
  filters:
    - "${IBC0L02Current} > 0.1"


##################################################################################################################
# Mya
#
# Here you specify information that will govern fetching of data from the mya archiver.
#
# dates:
#   begin: The start of the date range to fetch (YYYY-MM-DD [HH:MM:SS])
#   end: The end of the date range to fetch (YYYY-MM-DD [HH:MM:SS])
#   interval: An interval specifier ('1h' = 1 hour, '1d' = 1 day, etc.)
#   Example -
#     begin: "2021-01-01"
#     end: "2021-12-15"
#     interval: "1h"
#
#   -- OR --
#
# dates: "filename"
#   where filename contains either singe timestamp per line or a comma-separated begin,end,interval triplet per line
#   Example -
#     2021-01-01, 2021-02-01, 1h
#     2022-01-01, 2022-01-15, 1h
#     ...
#
# global:
#   A list of global signal names to be fetched at each time interval.

mya:
  dates: tests/timestamps.csv
#  dates:
#    begin: "2021-12-10"
#    end: "2021-12-15"
#    interval: "4h"
  global:
    - ISD0I011G
    - BOOMHLAMODE
    - BOOMHLBMODE
    - BOOMHLCMODE
    - BOOMHLDMODE
    - IBC0L02Current
    - IBC0R08CRCUR1
    - IBC1H04CRCUR2
    - IBC2C24CRCUR3
    - IBC3H00CRCUR4
    - IBCAD00CRCUR6
    - IGL1I00BEAMODE
    - IGL1I00HALLAMODE
    - IGL1I00HALLBMODE
    - IGL1I00HALLCMODE
    - IGL1I00HALLDMODE

##################################################################################################################
# Edges
#
# Here you specify information that will govern construction of edge features
#
#  connectivity: each readback node will be connected to to the intervening setpoint and readback nodes up until the nth
#                readback node, where n = edges.connectivity.
#  directed:  true if edges are considered unidirectional
#  weighted : if true, edges will be weighted using 1/(S[2]-S[1])

edges:
  connectivity: 2
  directed: true      # Probably stays true since the beam is directional
  weighted: false


##################################################################################################################
# Output
#
# Here you specify options that will govern output and its directory structure
#
# minutes:  if true then two digit minutes subdirectories will be created beneath hour
# seconds:  if true, then two digit seconds subdirectories will be created beneath minutes
#           Note: if seconds is true, then minutes will automatically also be regarded as true
#
output:
  minutes: true
  seconds: true

